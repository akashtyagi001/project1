package com.iris.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.iris.daos.EmployeeDao;
import com.iris.daos.ProjectDao;
import com.iris.daos.RoleDao;
import com.iris.models.Employee;
import com.iris.models.Operator;
import com.iris.models.Project;
import com.iris.models.ProjectAllocation;
import com.iris.models.ProjectConfiguration;
import com.iris.models.Role;
import com.iris.services.AdminService;
import com.iris.services.RoleService;

@Controller
@CrossOrigin(value="http://localhost:4200")
public class AdminController {

	@Autowired
  private AdminService adminService;
 
	@Autowired
	  private EmployeeDao employeeDao;
	@Autowired
	  private ProjectDao projectDao;
	
	
	@Autowired
	  private RoleService roleService;
	@Autowired
	HttpSession session;
	
	 @RequestMapping(value="/admin",method=RequestMethod.GET)
	  public String getSignInForm(){
	          return "admin";
	  }

	public boolean checkSession(ModelMap map) {

		if(session.getAttribute("uObj")==null) {

			map.addAttribute("msg","Session doesnt exist.. Login First");

			return true;

		}

		return false;

		

	}
	
	
	
	/*public boolean checkSession() {
			Object obj=session.getAttribute("uObj");
			System.out.println(session.getAttribute("uObj"));
			if (obj== null){
			return false;
			}
			
			return true;
*/
	//}
	/*@ExceptionHandler(Exception.class)

	public ModelAndView adminExceptionHandle(Exception e)

	{

		System.out.println("I m exception handler");

		ModelAndView mv = new ModelAndView("errorException");

		

		mv.addObject("msg",e);

		return mv;

	}
	*/
	/*@RequestMapping(value= "/AdminPage",method=RequestMethod.GET)

	public String admin(ModelMap map) {

		

		if(checkSession(map)) {

			return "homepage";

		}

		

		return "Admin";

		

	}
	

	*/
	
	/*@RequestMapping(value="/ConfigurationProject",method=RequestMethod.GET)
	
	  @ResponseBody
	   
		 public	List<ProjectConfiguration> getAllProjectConfig(){
		return adminService. getAllProjectConfig();
	}
		 
	@RequestMapping(value = "/ConfigurationProject", method = RequestMethod.GET)
 @ResponseBody	
	public   List<Project> getAllProject()
		 {
			 return adminService.getAllProject();
			 }
	@RequestMapping(value = "/configurationRole", method = RequestMethod.GET)
 @ResponseBody	 
	public	List<Role> getAllRole()
		 {
			return adminService.getAllRole();
		 }
	
	
	*/
	
	
	
	@CrossOrigin(origins="http://localhost:4200")
	 @GetMapping("/getAllProjects")
	 public ResponseEntity<?> getAllProjects(){
	  List<Project> list=projectDao.getAllProject();
	  if(list.size()!=0) {
	   return new ResponseEntity<List<Project>>(list,HttpStatus.OK);
	  }
	  else {
	   return new ResponseEntity<String>("No Project Found",HttpStatus.OK);
	  }
	 }
	 
	 @CrossOrigin(origins="http://localhost:4200")
	 @GetMapping("/getRoles")
	 public ResponseEntity<?> getRoles(){
	  List<Role> list=roleService.getAllRole();
	  if(list.size()!=0) {
	   return new ResponseEntity<List<Role>>(list,HttpStatus.OK);
	  }
	  else {
	   return new ResponseEntity<String>("No Role Found",HttpStatus.OK);
	  }
	 }
	 
	 @CrossOrigin(origins="http://localhost:4200")
	 @GetMapping("/getAllProjectConfig")
	 public ResponseEntity<?> getAllProjectConfig(){
	  List<ProjectConfiguration> projCon=projectDao.getAllProjectConfig();
	  if(projCon.size()!=0) {
	   return new ResponseEntity<List<ProjectConfiguration>>(projCon,HttpStatus.OK);
	  }
	  else {
	   return new ResponseEntity<String>("No ProjectConfig Found",HttpStatus.OK);
	  }
	 }
	 
	 @Autowired
	 RoleDao roleDao;
	 
	 
	 
	 @CrossOrigin(origins="http://localhost:4200")
	 @PostMapping("/submitProjectConfig")
	 public ResponseEntity<?> submitProjectConfig(@RequestBody ProjectConfiguration pObj){
		
		 System.out.println("I m submit Project Configuration : "+pObj);
		 
		 int rId=pObj.getRoleId();
		 int pId=pObj.getProjectId();
		 
		 pObj.setRoleObj(roleDao.getRoleById(rId));
		 pObj.setProjObj(projectDao.getProjectById(pId));
		 
	  boolean saved=projectDao.setProjectConfig(pObj);
	  if(saved) {
	   return new ResponseEntity<String>("ProjectConfig submitted successfully",HttpStatus.OK);
	  }
		  else {
		   return new ResponseEntity<String>("ProjectConfig submission error",HttpStatus.OK);
		  }
	 }
	 

	
	
	@RequestMapping(value="/Config",method=RequestMethod.GET)
public String Config(ModelMap map) {



		if(checkSession(map)) {

			return "login";

		}
		
		
		List<ProjectConfiguration> projConfig = adminService.getAllProjectConfig();
		map.addAttribute("configList",projConfig);
		List<Project> projectList = adminService.getAllProject();
		ProjectConfiguration projectConf=new ProjectConfiguration();
		Role roleObj =new Role();
		List<Role> roleList=adminService.getAllRole();
				
		map.addAttribute("pObj",projectConf);
       map.addAttribute("rObj",roleObj);
       map.addAttribute("proj",projectList);
       map.addAttribute("role",roleList);
        
      
        return "Config";
		}
		
	@RequestMapping(value= "/ProjectConfig",method=RequestMethod.GET)

	public ModelAndView submitConfig(@ModelAttribute(name="pObj") @Valid ProjectConfiguration pObj1,BindingResult result,ModelMap map) {

		/*ModelAndView mv=new ModelAndView("LoginForm");

			return mv;

		}
		System.out.println(pObj1);
		
		boolean saved=projectDao.setProjectConfig(pObj1);

		System.out.println("saved : "+saved);
		
		
		List<ProjectConfiguration> projCon=adminService.getAllProjectConfig();

		List<Project> plist=projectDao.getAllProject();

		List<Role> rlist=adminService.getAllRole();
		
		ProjectConfiguration projObj=new ProjectConfiguration();
		ModelAndView mv=new ModelAndView("configure");

		mv.addObject("configList", projCon);

		mv.addObject("projList",plist);

		System.out.println(plist);

		mv.addObject("roleList",rlist);

		//mv.addObject("roleob",roleObj);

		mv.addObject("pObj", projObj);

	
		if(saved) {
			mv.addObject("msg", "Configuration done!");
			return mv;
		}

		else {

		mv.addObject("msg", "Configuration error!");

		return mv;

		}

	}*/
		
		if(checkSession(map)) {

			return new ModelAndView ("login");

		}
		
	try {

			boolean saved = adminService.setProjectConfig(pObj1);

			map.addAttribute("msg","Project Configuration Successful");

			System.out.println("done in project config");

		

			if(saved) {

				ModelAndView mv=new ModelAndView("redirect:http://localhost:8007/Billing-front/Config");

				mv.addObject("msg","Configuration Added Succesfully..");

				System.out.println("return to page and added successfully");

				return mv;

			} else {

				ModelAndView mv=new ModelAndView("redirect:http://localhost:8007/Billing-front/Config");

				mv.addObject("errorMsg","noooo");

				System.out.println("return to page and not added added successfully");

				return mv;

			}

		}

		catch(Exception e)

		{

			System.out.println("I m catch");

			//e.printStackTrace();

			ModelAndView mv=new ModelAndView("redirect:http://localhost:8007/Billing-front/Config");

			mv.addObject("errorMsg","Project already configured..");

			return mv;

		}
	}
	
	
	@RequestMapping(value = "/allocationProject", method = RequestMethod.GET)
    @ResponseBody
   
		 public	List<Project> getAllProject(){
		return adminService.getAllProject();
	}
		 
	@RequestMapping(value = "/allocationRole", method = RequestMethod.GET)
    @ResponseBody	
	public   List<Role> getAllRole()
		 {
			 return adminService.getAllRole();}
	@RequestMapping(value = "/allocationEmployee", method = RequestMethod.GET)
    @ResponseBody	 
	public	List<Employee> getAllEmployee()
		 {
			return adminService.getAllEmployee(); 
		 }
	@RequestMapping(value = "/allocationprojectAllo", method = RequestMethod.GET)
    @ResponseBody	
	public	List<ProjectAllocation> getAllProjectAllocation()
			{
				return projectDao.getAllProjectAllocation();
			}
	

	 @PostMapping("/submitProjectAllocation")
	 public ResponseEntity<?> submitProjectConfig(@RequestBody ProjectAllocation projectAllocation){
	
		 int empId=projectAllocation.getEmployeeId();
		 int roleId=projectAllocation.getRoleId();
		 int projectId=projectAllocation.getProjectId();
		 String location=projectAllocation.getLocation();
		 
		 projectAllocation.setEmplObj(employeeDao.getEmployeeById(empId));
		 
		 List<ProjectConfiguration> pConfigList=projectDao.validateProject(projectId, roleId, location);
		 if(pConfigList.size()!=0) {
			 
			 projectAllocation.setConfigObj(pConfigList.get(0));
		 }
			 
	  boolean saved=projectDao.setProjectAllocation(projectAllocation);
	  if(saved) {
	   return new ResponseEntity<String>("ProjectConfig submitted successfully",HttpStatus.OK);
	  }
	  else {
	   return new ResponseEntity<String>("ProjectConfig submission error",HttpStatus.OK);
	  }
	 }
	 
	 
	 
	 
	 
	 
	
	
	@RequestMapping(value= "/Allocation",method=RequestMethod.GET)

	public String Allocation(ModelMap map) {
		if(checkSession(map)) {

			return "login";

		}
		List<Project> projectList = adminService.getAllProject();
       List<Role> rolesList = adminService.getAllRole();
		List<Employee> Elist=adminService.getAllEmployee();
		List<ProjectAllocation> PAlist=projectDao.getAllProjectAllocation();
	map.addAttribute("dObj", Elist);
	map.addAttribute("proj", projectList);
	map.addAttribute("role",rolesList);
	map.addAttribute("AllObj",PAlist);

		return "Allocation";
		}


	@RequestMapping(value="/submitAllocate",method=RequestMethod.GET)

	public String validateConfigr(@RequestParam int projectId,@RequestParam int roleId,@RequestParam String location,@RequestParam int employeeId,ModelMap map){

		System.out.println(projectId+""+roleId+""+location+""+employeeId);
		if(checkSession(map)) {

			return "login";

		}
		/*List<Project> projectList = adminService.getAllProject();
	       List<Role> rolesList = adminService.getAllRole();
			List<Employee> Elist=adminService.getAllEmployee();
		map.addAttribute("dObj", Elist);
		map.addAttribute("proj", projectList);
		map.addAttribute("role",rolesList);
	
		*/
		
		
		
		
	//List<ProjectConfiguration> Obj=projectDao.validateProject(projectId,roleId,location);
	//ProjectConfiguration confObj=Obj.get(0);

	/*Employee EmpObj=employeeDao.getEmployeeById(employeeId);
       ProjectAllocation ab=new ProjectAllocation();
        ab.setEmplObj(EmpObj);
         ab.setConfigObj(confObj);
	boolean saved=projectDao.setProjectAllocation(ab);

	if(saved) {

		map.addAttribute("msg","Allocation done");

		return "Allocation";
	

	}

	else {

		map.addAttribute("msg","Allocation error");

	return "Allocation";

	}*/



	List<ProjectConfiguration> Obj=projectDao.validateProject(projectId,roleId,location);
	

	List<Project> projectList = adminService.getAllProject();

	

	

	List<Role> rolesList = adminService.getAllRole();

	List<Employee> Elist=adminService.getAllEmployee();

	List<ProjectAllocation> PAlist=projectDao.getAllProjectAllocation();

	

	map.addAttribute("dObj", Elist);

	map.addAttribute("proj", projectList);

	map.addAttribute("role",rolesList);

	map.addAttribute("AllObj",PAlist);

	

	

	
	if(Obj.size()>0) {
	ProjectConfiguration configObj=Obj.get(0);

	Employee empObj=employeeDao.getEmployeeById(employeeId);

	

	

	ProjectAllocation ab=new ProjectAllocation();

	ab.setEmplObj(empObj);

	ab.setConfigObj(configObj);

	

	
	System.out.println("Project Allocation : "+ab.getEmplObj().getEmployeeId()+" "+ab.getConfigObj().getConfigurationId());
	boolean saved=projectDao.setProjectAllocation(ab);

	System.out.println("saved");

		

		return "Allocation";
	}
	else {
		
		return "Allocation";
	}

	}


	
	
	@RequestMapping(value= {"ViewEmployee"},method=RequestMethod.GET)

	public String DevBill(ModelMap map)

	{
		if(checkSession(map)) {

			return "login";

		}
		

		//List<ProjectAllocation> dList = adminDao.getAllAllocate();

		List<Employee> DList=employeeDao.getAllEmployee();

		map.addAttribute("DL", DList);

		return "ViewEmployee";

	}

	

	@RequestMapping(value= {"Bill"},method=RequestMethod.GET)

	public ModelAndView DevBills(@RequestParam(name="month") String month,@RequestParam(name="employeeId") int employeeId,@RequestParam(name="year") int year,ModelMap map)

	{
		if(checkSession(map)) {

			return new ModelAndView("login");

		}
		try 

		{

			System.out.println(month);

			ProjectAllocation configObj = adminService.getConfig(employeeId);

			double perHourBilling=configObj.getConfigObj().getBill();

			String name = adminService.getEmployeeById1(employeeId);

			System.out.println("i ma in bill");

			map.addAttribute("name", name);

			Operator deo=employeeDao.getBill(employeeId, month,year);

			System.out.println(deo.getFullDay());

			double bill = adminService.getBill(perHourBilling,deo);

			map.addAttribute("bill",bill);

			map.addAttribute("de", employeeId);

			map.addAttribute("mo",(month.charAt(0)+"").toUpperCase()+(month.substring(1).toLowerCase()));

			map.addAttribute("y",year);

			ModelAndView mv=new ModelAndView("ViewEmployeeDetails");

			mv.addObject("msg","Developer Allocated Succesfully..");

			System.out.println("enter in the bill controller");

			return mv;

		}

		catch(Exception e)

		{

			ModelAndView mv=new ModelAndView("redirect:http://localhost:9696/BillingSystem/DevBilling");

			mv.addObject("errorMsg","Developer not  allocated ..");

			System.out.println("catch of bill");

			return mv;

		}

		

	}

	

	@RequestMapping(value= {"viewProject"},method=RequestMethod.GET)

	public String ProjBill(ModelMap map)

	{
		if(checkSession(map)) {

			return "login";

		}

		List<Project> pList = adminService.getAllProject();

		map.addAttribute("pList", pList);

		return "viewProject";

	}

	@RequestMapping(value= {"BillProject"},method=RequestMethod.GET)

	public ModelAndView billingProject(@RequestParam(name="projectId") int id,@RequestParam(name="month") String month,@RequestParam(name="year") int year,ModelMap map) {

		
		if(checkSession(map)) {

			return new ModelAndView("login");

		}
		

		try {

			System.out.println(id + month);

			double bill = 0;

			List<ProjectConfiguration> projConfigList=projectDao.getAllConfigId(id);

		

			String name = adminService.getProjectName(id);

			map.addAttribute("name",name);

			map.addAttribute("month", (month.charAt(0)+"").toUpperCase()+(month.substring(1).toLowerCase()));

			int count = 0;

			List<Double> sum = new ArrayList<Double>();

			List<ProjectAllocation> obj = new ArrayList<ProjectAllocation>();

			

			

			Map<Integer,Double> myMap=new HashMap<Integer, Double>();

			

			for(ProjectConfiguration configObj: projConfigList)

			{

				int cid = configObj.getConfigurationId();

				int perHourBilling = configObj.getBill();

				ProjectAllocation proAllocate = employeeDao.getProAllocationObj(cid);

				int employeeId = proAllocate.getEmplObj().getEmployeeId();

				Operator deo=employeeDao.getBill(employeeId, month,year);

				double halfDay=deo.getHalfDay()*4.5;

				double fullDay=deo.getFullDay()*9;

				

				bill+=((halfDay+fullDay)*perHourBilling);

				double x = (halfDay*perHourBilling+fullDay*perHourBilling);

				

				myMap.put(employeeId,x);

				

				sum.add(x);

				System.out.println("Sum X :" +(halfDay*perHourBilling+fullDay*perHourBilling));

				count++;

				obj.add(proAllocate);

				System.out.println(obj);

				System.out.println(sum);

				System.out.println(bill);

				System.out.println(count);

			

			}

			map.addAttribute("bills", sum);

			map.addAttribute("bill", bill);

			map.addAttribute("count", count);

			map.addAttribute("devl", obj);

			

			map.addAttribute("myMap", myMap);

			ModelAndView mv=new ModelAndView("viewProject");

			return mv;

		}

		catch(Exception e) {

			ModelAndView mv=new ModelAndView("redirect:http://localhost:9696/BillingSystem/projectBilling");

			mv.addObject("errorMsg","Project not allocated .. ");

			return mv;

		}

	}









@RequestMapping(value= {"Bills"},method=RequestMethod.POST)

public ResponseEntity<?> EmpBills(@RequestParam(name="month") String month,@RequestParam(name="employeeId") int employeeId,@RequestParam(name="year") int year)

{

	try 

	{
	


		System.out.println("month");

		ProjectAllocation configObj = adminService.getConfig(employeeId);

		double perHourBilling=configObj.getConfigObj().getBill();

		String name = adminService.getEmployeeById1(employeeId);

		System.out.println("i ma in bill");

		Operator deo=employeeDao.getBill(employeeId, month,year);

		System.out.println(deo.getFullDay());

		double bill = adminService.getBill(perHourBilling,deo);

	String s=String.valueOf(bill);
		System.out.println("enter in the bill controller");
return new ResponseEntity<String>(s,HttpStatus.OK);
	}
catch(Exception e)
{
	e.printStackTrace();
		System.out.println("catch of bill");
         return null;
		
	}

	



}

}























