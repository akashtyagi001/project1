package com.iris.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.iris.daos.ProjectDao;
import com.iris.models.Employee;
import com.iris.models.Operator;
import com.iris.models.Project;
import com.iris.models.ProjectAllocation;
import com.iris.models.ProjectConfiguration;
import com.iris.models.Role;
import com.iris.services.EmployeeService;
import com.iris.services.OperatorService;
import com.iris.services.ProjectService;
import com.iris.services.UserService;
@Controller
@CrossOrigin(value="http://localhost:4200")
public class OperatorController {
	
	
	
/*
@Autowired
	private OperatorService operatorService;	

	@Autowired
	private EmployeeDao employeeDao;


	@Autowired
	private ProjectDao projectDao;
	

	@Autowired
    HttpSession session;

@RequestMapping(value= "/Attendance",method=RequestMethod.GET)
	public String Attandance(ModelMap map) {

		List<Employee> Dlist=operatorService.getAllEmployee();
	
        List<Project> projectList = operatorService.getAllProject();
   
		Operator dataObj=new Operator();
		 
		map.addAttribute("dataObj", dataObj);
		 
		map.addAttribute("proj", projectList);
		 
		//map.addAttribute("dObj", Dlist);
		return "Attendance";

	}
	
/*	@RequestMapping(value= {"/submitAttendance"},method=RequestMethod.GET)
	
	public ModelAndView submitAttendance(@Valid @ModelAttribute(name="dataObj")  Operator dataObj,BindingResult result,ModelMap map) {
	
		try {

			boolean saved = operatorService.setAttandance(dataObj);

			map.addAttribute("msg","set Attendance Successful");

			System.out.println("done in project config");

		

			if(saved) {

				ModelAndView mv=new ModelAndView("redirect:http://localhost:1234/ProjectBilling/Config");

				mv.addObject("msg","Configuration Added Succesfully..");

				System.out.println("return to page and added successfully");

				return mv;

			} else {

				ModelAndView mv=new ModelAndView("redirect:http://localhost:1234/ProjectBilling/Config");

				mv.addObject("errorMsg","noooo");

				System.out.println("return to page and not added added successfully");

				return mv;

			}

		}

		catch(Exception e)

		{

			System.out.println("I m catch");

			//e.printStackTrace();

			ModelAndView mv=new ModelAndView("redirect:http://localhost:1234/ProjectBilling/Config");

			mv.addObject("errorMsg","Project already configured..");

			return mv;

		}

	}*/
	@Autowired
	private OperatorService operatorService;
	
	@Autowired

	private UserService userService;
	
	@Autowired

	private ProjectService projectService;

	@Autowired

	private EmployeeService employeeService;
	
	@Autowired

	private ProjectDao projectDao;
	
	@Autowired
	HttpSession session;
	
	
	
	
	public boolean checkSession(ModelMap map) {
		

		if(session.getAttribute("uObj")==null) {

			map.addAttribute("msg","Session doesnt exist..");

			return true;

		}

		return false;

		

	}
	 @RequestMapping(value="/operator",method=RequestMethod.GET)
	  public String operatorForm(ModelMap map){
		 if(checkSession(map)) {

				return "login";

			}

	          return "operator";
	 
	 }
	
	
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	

	/*
		@RequestMapping(value = "/AttendanceEmp", method = RequestMethod.GET)
	    @ResponseBody
	   
	    List<Employee> getAllEmployee(){
			return operatorService.getAllEmployee();
		}
			 
		@RequestMapping(value = "/allocationProjects", method = RequestMethod.GET)
	    @ResponseBody	
		public   List<Project> getAllProject()
			 {
				 return projectService.getAllProject();}
/*		
 @ResponseBody

 @RequestMapping(value="/getEmployeeList",method=RequestMethod.GET)
 

  public List<Employee> getEmployeeById(int projectId)
 {
	  List<Employee> empList=new ArrayList<Employee>();
              return employeeService.getEmployeeById(projectId);
	} 
		*/
/* @ResponseBody

 @RequestMapping(value="/AttendancegetConfiguration",method=RequestMethod.GET)
		 List<ProjectConfiguration>getAllProjectConfiguration(int projectId){
		return projectDao.getAllProjectConfiguration(projectId);
		}
		@ResponseBody

 @RequestMapping(value="/AttendancegetAllocation",method=RequestMethod.GET)
 List<ProjectAllocation> getAllProjectAllocation(){
		return projectDao.getAllProjectAllocation();}
		*/
		
		
		
		
		@ResponseBody
		@RequestMapping(value="/getEmployeeList",method=RequestMethod.GET)
		public List<Employee> getDeveloperById(@RequestParam("projectId")int projectId ){
			//String b=pro.substring(pro.length()-1);
		//	int projectId = Integer.parseInt(b);
			
			
			System.out.println("Given project Id : "+projectId);
			 List<Employee> empList=new ArrayList<Employee>();



			 List<ProjectConfiguration> configList=projectDao.getAllProjectConfiguration(projectId);
			 System.out.println(configList);
			 List<ProjectAllocation> allocationList=projectDao.getAllProjectAllocation();


			 for(ProjectConfiguration config:configList) {

				 for(ProjectAllocation allocation:allocationList) {

					 if(config.getConfigurationId()==allocation.getConfigObj().getConfigurationId()) {

						 Employee eObj=allocation.getEmplObj();

						 empList.add(eObj);

					 }
			 
				}
			}
			 System.out.println("empList : "+empList);

			 

			 return empList;

		 }



		@RequestMapping(value= {"/submitAttendance"},method=RequestMethod.POST)
		public ResponseEntity<?> addconfig(@RequestBody Operator dataObj){
			
			
			try {
				if((dataObj.getFullDay()+dataObj.getHalfDay() >=30))
				
				
				{
					return null;
				}
				else {
					boolean saved = operatorService.setAttandance(dataObj);

				System.out.println("done in project config");
			
				if(saved==true) {
			return new ResponseEntity<String>("done",HttpStatus.OK);
		}
		
				else return new ResponseEntity<String>("not done",HttpStatus.UNAUTHORIZED);}
				
			}
			catch(Exception e)
			{
				System.out.println("I m catch");
				
				return null;
			}
		}


		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	 
	 
	@RequestMapping(value= "/Attendance",method=RequestMethod.GET)

public String markAttendance(ModelMap map) {

		

		if(checkSession(map)) {

			return "login";

		}
		List<Employee> Elist=operatorService.getAllEmployee();
		List<Project> projectList=projectService.getAllProject();



		//Roles roleObj=new Roles();

		Operator dataObj=new Operator();

		

		map.addAttribute("proj",projectList);

		map.addAttribute("dataObj", dataObj);
		map.addAttribute("EObj",Elist);

		return "Attendance";

	}
	
	
	
	


 @ResponseBody

 @RequestMapping(value="/getEmployeesList",method=RequestMethod.GET)

 public List<Employee> getEmployeeById(@RequestParam("projectId")int projectId){

	 System.out.println("Given project Id : "+projectId);


		

	 List<Employee> empList=new ArrayList<Employee>();



	 List<ProjectConfiguration> configList=projectDao.getAllProjectConfiguration(projectId);
	 System.out.println(configList);
	 List<ProjectAllocation> allocationList=projectDao.getAllProjectAllocation();

	 

	 for(ProjectConfiguration config:configList) {

		 for(ProjectAllocation allocation:allocationList) {

			 if(config.getConfigurationId()==allocation.getConfigObj().getConfigurationId()) {

				 Employee eObj=allocation.getEmplObj();

				 empList.add(eObj);

			 }

		 }

	 }

	 

	 System.out.println("empList : "+empList);

	 

	 return empList;

 }


 @RequestMapping(value= {"/submitAttendance"},method=RequestMethod.GET)
	
	public ModelAndView submitAttendance(@Valid @ModelAttribute(name="dataObj")  Operator dataObj,BindingResult result,ModelMap map) {

	 if(checkSession(map)) {

			return new ModelAndView("login");

		}

	 if(result.hasErrors())
	 {
		 ModelAndView mv =new ModelAndView("Attendance");
		 return mv;
	 }
	 else {
	
	 try {
		
		 if((dataObj.getFullDay()+dataObj.getHalfDay() >=30))

				

				

			{

				ModelAndView mv=new ModelAndView("redirect:http://localhost:8007/Billing-front/Attendance");

				mv.addObject("errorMsg","Error in marking attendence..");

				return mv;

			}
			 
			boolean saved = operatorService.setAttandance(dataObj);

			map.addAttribute("msg","set Attendance Successful");

			System.out.println("done in project config");

		

			if(saved) {

				ModelAndView mv=new ModelAndView("redirect:http://localhost:8007/Billing-front/Attendance");

				mv.addObject("msg","Configuration Added Succesfully..");

				System.out.println("return to page and added successfully");

				return mv;

			} else {

				ModelAndView mv=new ModelAndView("redirect:http://localhost:8007/Billing-front/Attendance");

				mv.addObject("errorMsg","noooo");

				System.out.println("return to page and not added added successfully");

				return mv;

			}

		}

		catch(Exception e)

		{

			System.out.println("I m catch");

			//e.printStackTrace();

			ModelAndView mv=new ModelAndView("redirect:http://localhost:8007/Billing-front/Attendance");

			mv.addObject("errorMsg","Project already configured..");

			return mv;

		}

	}
	
 }
	
	
	
}
